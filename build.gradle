plugins {
    id "com.jfrog.bintray" version "1.8.3"
    id "com.diffplug.gradle.spotless" version "3.1.0"
    id "de.undercouch.download" version "3.4.3"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'


project.ext.masterfile = (new File(projectDir,'/gradle/master.gradle')).getAbsolutePath()

// Attempts to download master gradle file
if(!hasProperty('do_not_update_master_file'))
try {
    download {
        src 'https://github.com/ClearControl/master/blob/master/master.gradle?raw=true'
        dest project.ext.masterfile
        overwrite true
        onlyIfModified true
        tempAndMove true
    }
}
catch (Throwable e)
{
}

apply from: project.ext.masterfile

//***********************************************************************************
// JAVA CODE BUILDING


sourceSets {
    main
    {
        java
        { srcDir 'src' }
        resources
        { srcDir 'src' }
    }
    test
    {
        java
        { srcDir 'src' }
        resources
        { srcDir 'src' }
    }
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

test 
{
    testLogging.showStandardStreams = true 
    testLogging 
    {
        events "passed", "skipped", "failed"
    }

    exclude '**/demo/**'

    maxHeapSize = "16G"
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies
{
    // JUnit:
    compile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'junit', name: 'junit', version: '4.11'

    // ASDKJ:
    compile ('net.clearcontrol:asdkj:'+depver('asdkj'))               {transitive=true; changing= true}

    // ClearControl:
    compile ('net.clearcontrol:clearcontrol:'+depver('clearcontrol')) {transitive= true; changing= true}
    
    // post processing:
    compile ('net.clearcontrol:clearclij:'+depver('clearclij'))       {transitive= true; changing= true}
    compile ('de.mpicbg.spimcat:spimcelldetection:0.1.6')             {transitive= true; changing= true}
    compile ('de.mpicbg.rhaase:postprocessing-utilities:0.2.7')       {transitive= true; changing= true}

    // other:
    compile 'pl.edu.icm:jlargearrays:1.3-RH'
    compile 'com.github.wendykierp:jtransforms:3.1.2-RH'

    // Big data-viewer:
    compile 'sc.fiji:bigdataviewer-vistools:1.0.0-beta-11'
}


repositories 
{
    // Main repos:
    mavenLocal()
    mavenCentral()
    jcenter()

    // maven {url "C:\\Users\\myersadmin\\.m2\\repository"}
    maven { url "http://oss.sonatype.org/content/groups/public"} 
    maven { url "http://mvnrepository.com/artifact" }

    // ClearControl:
    maven { url  "http://maven.imagej.net/content/repositories/releases" }
    maven { url  "http://maven.imagej.net/content/repositories/snapshots" }
    maven { url  "http://dl.bintray.com/clearcontrol/ClearControl"  }
    maven { url "http://dl.bintray.com/haesleinhuepf/snapshots" }

    //bio formats
    maven { url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases" }
    maven { url "http://artifacts.openmicroscopy.org/artifactory/maven/"}

    // ClearVolume: 
    maven { url "http://dl.bintray.com/clearvolume/ClearVolume" }

    //imglib2:
    maven { url  "http://maven.imagej.net/content/repositories/releases" }
    maven { url  "http://maven.imagej.net/content/repositories/public/" }
    maven { url  "http://maven.imagej.net/content/repositories/snapshots" }
    maven { url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/" }
    
    //jfxtras:
    maven { url "https://mvnrepository.com/artifact/org.jfxtras/jfxtras-labs" }
    
    //FontAwesome
    maven { url  "http://dl.bintray.com/jerady/maven" }
    
    //Sqeazy:
    maven {url  "http://dl.bintray.com/sqeazy/maven" }

}

task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }


//***********************************************************************************
// PUBLISHING

group   = project.ext.groupname
version = project.ext.versionsMap[project.name]

artifacts
        {
            archives sourcesJar
            archives javadocJar
        }

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
        }
    }
}






